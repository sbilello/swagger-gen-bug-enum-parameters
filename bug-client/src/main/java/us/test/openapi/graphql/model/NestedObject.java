/*
 * Nested Object
 * Nested Objct Sample.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package us.test.openapi.graphql.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import us.test.openapi.graphql.model.Parakeet;
/**
 * NestedObject
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-09-22T11:36:00.722-07:00[America/Los_Angeles]")
public class NestedObject {
  @JsonProperty("name")
  private String name = null;

  @JsonProperty("types")
  private List<String> types = null;

  @JsonProperty("parakeet")
  private Parakeet parakeet = null;

  @JsonProperty("count")
  private Integer count = null;

  @JsonProperty("enable")
  private Boolean enable = null;

  public NestedObject name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public NestedObject types(List<String> types) {
    this.types = types;
    return this;
  }

  public NestedObject addTypesItem(String typesItem) {
    if (this.types == null) {
      this.types = new ArrayList<String>();
    }
    this.types.add(typesItem);
    return this;
  }

   /**
   * Get types
   * @return types
  **/
  @Schema(description = "")
  public List<String> getTypes() {
    return types;
  }

  public void setTypes(List<String> types) {
    this.types = types;
  }

  public NestedObject parakeet(Parakeet parakeet) {
    this.parakeet = parakeet;
    return this;
  }

   /**
   * Get parakeet
   * @return parakeet
  **/
  @Schema(description = "")
  public Parakeet getParakeet() {
    return parakeet;
  }

  public void setParakeet(Parakeet parakeet) {
    this.parakeet = parakeet;
  }

  public NestedObject count(Integer count) {
    this.count = count;
    return this;
  }

   /**
   * Get count
   * @return count
  **/
  @Schema(description = "")
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }

  public NestedObject enable(Boolean enable) {
    this.enable = enable;
    return this;
  }

   /**
   * Get enable
   * @return enable
  **/
  @Schema(description = "")
  public Boolean isEnable() {
    return enable;
  }

  public void setEnable(Boolean enable) {
    this.enable = enable;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NestedObject nestedObject = (NestedObject) o;
    return Objects.equals(this.name, nestedObject.name) &&
        Objects.equals(this.types, nestedObject.types) &&
        Objects.equals(this.parakeet, nestedObject.parakeet) &&
        Objects.equals(this.count, nestedObject.count) &&
        Objects.equals(this.enable, nestedObject.enable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, types, parakeet, count, enable);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NestedObject {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("    parakeet: ").append(toIndentedString(parakeet)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    enable: ").append(toIndentedString(enable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
